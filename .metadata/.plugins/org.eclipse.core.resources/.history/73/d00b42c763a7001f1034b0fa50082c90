package br.fiap.com.dao;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import br.com.fiap.beans.Usuario;



public class UsuarioDAO {
    private Connection connection;

    public UsuarioDAO(Connection connection) {
        this.connection = connection;
    }

    public void closeConnection() throws SQLException {
        if (connection != null && !connection.isClosed()) {
            connection.close();
        }
    }
    
    public void inserir(Usuario usuario) throws SQLException {
        String sql = "INSERT INTO USUARIOS (email, senha, tipo_usuario, id_referencia) VALUES (?, ?, ?, ?)";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, usuario.getEmail());
            stmt.setString(2, hashSenha(usuario.getSenha())); // Armazena a senha como hash
            stmt.setString(3, String.valueOf(usuario.getTipoUsuario()));
            stmt.setString(4, usuario.getIdReferencia());
            stmt.executeUpdate();
        }
    }

    public Usuario autenticar(String email, String senha) throws SQLException {
        String sql = "SELECT * FROM USUARIOS WHERE email = ? AND senha = ?";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setString(1, email);
            stmt.setString(2, senha);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Usuario usuario = new Usuario();
                    usuario.setIdUsuario(rs.getInt("id_usuario"));
                    usuario.setEmail(rs.getString("email"));
                    usuario.setTipoUsuario(rs.getString("tipo_usuario"));
                    usuario.setIdReferencia(rs.getString("id_referencia"));
                    return usuario;
                }
            }
        }
        return null; // Credenciais inválidas
    }

    public String hashSenha(String senha) {
	    try {
	        // Obtém uma instância do algoritmo SHA-256
	        MessageDigest digest = MessageDigest.getInstance("SHA-256");
	        
	        // Converte a senha em bytes e calcula o hash
	        byte[] hashBytes = digest.digest(senha.getBytes());
	        
	        // Converte os bytes do hash para um formato hexadecimal legível
	        StringBuilder hashHex = new StringBuilder();
	        for (byte b : hashBytes) {
	            hashHex.append(String.format("%02x", b));
	        }
	        
	        return hashHex.toString();
	    } catch (NoSuchAlgorithmException e) {
	        throw new RuntimeException("Erro ao hashear a senha", e);
	    }
	}
    
    
}
