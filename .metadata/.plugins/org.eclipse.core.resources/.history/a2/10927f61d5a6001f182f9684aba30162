package br.com.fiap.resource;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import br.com.fiap.beans.Motorista;
import br.com.fiap.beans.Passageiro;

@Path("/auth")
public class LoginResource {
	@POST
    @Path("/login")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    public Response login(Credentials credentials) {
        String email = credentials.getEmail();
        String senha = credentials.getSenha();

        // Define SQL para procurar o usuário em ambas as tabelas
        String sqlMotorista = "SELECT cpf_motorista AS cpf, nome, tipo_usuario FROM MOTORISTAS WHERE email = ? AND senha = ?";
        String sqlPassageiro = "SELECT cpf_passageiro AS cpf, nome, tipo_usuario FROM PASSAGEIROS WHERE email = ? AND senha = ?";

        try (Connection conn = Database.getConnection();
             PreparedStatement stmtMotorista = conn.prepareStatement(sqlMotorista);
             PreparedStatement stmtPassageiro = conn.prepareStatement(sqlPassageiro)) {

            // Verificar Motorista
            stmtMotorista.setString(1, email);
            stmtMotorista.setString(2, senha);
            ResultSet rsMotorista = stmtMotorista.executeQuery();

            if (rsMotorista.next()) {
                // Retorna dados do motorista
                return Response.ok(new Motorista(
                    rsMotorista.getString("cpf"),
                    rsMotorista.getString("nome"),
                    rsMotorista.getString("tipo_usuario")
                )).build();
            }

            // Verificar Passageiro
            stmtPassageiro.setString(1, email);
            stmtPassageiro.setString(2, senha);
            ResultSet rsPassageiro = stmtPassageiro.executeQuery();

            if (rsPassageiro.next()) {
                // Retorna dados do passageiro
                return Response.ok(new Passageiro(
                    rsPassageiro.getString("cpf"),
                    rsPassageiro.getString("nome"),
                    rsPassageiro.getString("tipo_usuario")
                )).build();
            }

            return Response.status(Response.Status.UNAUTHORIZED).entity("Credenciais inválidas").build();

        } catch (SQLException e) {
            e.printStackTrace();
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Erro ao acessar o banco de dados").build();
        }
    }
}
