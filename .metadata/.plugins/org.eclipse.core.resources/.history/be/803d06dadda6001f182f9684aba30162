package br.com.fiap.resource;

import java.sql.SQLException;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import br.com.fiap.beans.Motorista;
import br.com.fiap.bo.MotoristaBO;
import br.com.fiap.exceptions.MotoristaNaoEncontradoException;

@Path("/motorista")
public class MotoristaResource {

    private MotoristaBO motoristaBO = new MotoristaBO();

    // Método GET para buscar motorista por CPF
    @GET
    @Path("/{cpf}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMotoristaByCPF(@PathParam("cpf") String cpf) throws SQLException {
        try {
            Motorista motorista = motoristaBO.getMotoristaByCPF(cpf);
            return Response.ok(motorista).build();
        } catch (MotoristaNaoEncontradoException e) {
            return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
        }
    }

    // Método POST para adicionar um novo motorista
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response adicionarMotorista(Motorista motorista) {
        System.out.println("Dados recebidos: " + motorista);
        System.out.println("CPF: " + motorista.getCpf());

        // Validação do CPF
        if (motorista.getCpf() == null || motorista.getCpf().trim().length() != 11) {
            return Response.status(Response.Status.BAD_REQUEST)
                .entity("Erro: CPF inválido!")
                .build();
        }

        // Chamada ao BO para inserir o motorista no banco
        try {
            motoristaBO.inserirMotorista(motorista);
            return Response.status(Response.Status.CREATED).entity(motorista).build();
        } catch (SQLException e) {
            e.printStackTrace();
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR).build();
        }
    }

    // Método PUT para atualizar um motorista
    @PUT
    @Path("/{cpf}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public Response atualizarMotorista(@PathParam("cpf") String cpf, Motorista motorista) throws SQLException {
        try {
            motorista.setCpf(cpf);  // Ajustando o CPF na instância do motorista
            motoristaBO.atualizarMotorista(motorista);
            return Response.ok(motorista).build();
        } catch (MotoristaNaoEncontradoException e) {
            return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
        }
    }

    // Método DELETE para excluir um motorista
    @DELETE
    @Path("/{cpf}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response deletarMotorista(@PathParam("cpf") String cpf) throws SQLException {
        try {
            motoristaBO.deletarMotorista(cpf);
            return Response.noContent().build();
        } catch (MotoristaNaoEncontradoException e) {
            return Response.status(Response.Status.NOT_FOUND).entity(e.getMessage()).build();
        }
    }
}
